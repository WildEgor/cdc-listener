version: "3.8"

networks:
  listener-net:
    driver: bridge

volumes:
  mongo_replica_1_data:

services:
  mongodb:
    image: mongo:7
    command: mongod --replSet rs0 --bind_ip_all
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: |
        mongosh --eval "try { rs.status().ok } catch (e) { rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: 'host.docker.internal:27017' }] }).ok }"
      start_period: 0s
      interval: 500ms
      timeout: 5s
      retries: 5
    ports:
      - "27017:27017"
    volumes:
      - "mongo_replica_1_data:/data/db"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - listener-net
    deploy:
      restart_policy:
        condition: on-failure

  prometheus:
    image: prom/prometheus:v2.51.1
    container_name: prometheus
    networks:
      - listener-net
    ports:
      - "9090:9090"
    volumes:
      - "./configs/prometheus.yml:/etc/prometheus/prometheus.yml"
    deploy:
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana:10.2.6
    container_name: grafana
    networks:
      - listener-net
    ports:
      - "3000:3000"
    deploy:
      restart_policy:
        condition: on-failure

  listener:
    hostname: listener
    restart: unless-stopped
    networks:
      - listener-net
    build:
      # if use private libs uncomment this
      #      args:
      #        - GITHUB_TOKEN=${GITHUB_TOKEN}
      context: ./
      dockerfile: Dockerfile
      target: dev
#    env_file:
#      - .env
    volumes:
      - ./:/app
      - /data:/app/data
    ports:
      - 8888:8888
    depends_on:
      - mongodb
      - rabbitmq